###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "../c:\\Users\\danielp\\llm_to_midi\\baml_src\\clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> OpenAIo1 {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"o1\"\r\n    reasoning_effort \"high\"\r\n    temperature 1\r\n    api_key env.OPENAI_API_KEY\r\n\r\n  }\r\n}\r\n\r\nclient<llm> OpenAIo1Mini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"o1-mini\"\r\n    temperature 1\r\n    api_key env.OPENAI_API_KEY\r\n\r\n  }\r\n\r\n}\r\n\r\nclient<llm> OpenAIo3Mini {\r\n  provider openai\r\n  retry_policy Exponential\r\n\r\n  options {\r\n    reasoning_effort \"high\"\r\n    model \"o3-mini\"\r\n    temperature 1\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> OpenAIGPT4o {\r\n  provider openai\r\n  retry_policy Exponential\r\n\r\n  options {\r\n    temperature 1\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n\r\n  }\r\n}\r\n\r\n\r\nclient<llm> HyperbolicDeepseekReasoner {\r\n  provider openai-generic\r\n  retry_policy Exponential\r\n  options {\r\n    model deepseek-ai/DeepSeek-R1\r\n    api_key env.HYPERBOLIC_DEEPSEEK_API_KEY\r\n    base_url \"https://api.hyperbolic.xyz/v1/\"\r\n    default_role \"user\"\r\n    temperature 1\r\n\r\n  }\r\n}\r\n\r\nclient<llm> HyperbolicDeepseekV3 {\r\n  provider openai-generic\r\n  retry_policy Exponential\r\n  options {\r\n    model deepseek-ai/DeepSeek-V3\r\n    api_key env.HYPERBOLIC_DEEPSEEK_API_KEY\r\n    base_url \"https://api.hyperbolic.xyz/v1/\"\r\n    default_role \"user\"\r\n    temperature 1\r\n  }\r\n}\r\n\r\n\r\nclient<llm> DeepseekReasoner {\r\n  provider openai-generic\r\n  retry_policy Exponential\r\n  options {\r\n    model deepseek-reasoner\r\n    api_key env.DEEPSEEK_API_KEY\r\n    base_url \"https://api.deepseek.com\"\r\n    temperature 1\r\n\r\n  }\r\n}\r\n\r\n\r\nclient<llm> AnthropicSonnet {\r\n  provider anthropic\r\n  retry_policy Exponential\r\n  options {\r\n    model \"claude-3-5-sonnet-latest\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n    temperature 1\r\n  }\r\n\r\n}\r\n\r\nclient<llm> AnthropicOpus {\r\n  provider anthropic\r\n  retry_policy Exponential\r\n  options {\r\n    model \"claude-3-opus-latest\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n    temperature 1\r\n  }\r\n}\r\n\r\nclient<llm> AnthropicHaiku {\r\n  provider anthropic\r\n  retry_policy Exponential\r\n  options {\r\n    model \"claude-3-5-haiku-latest\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n    temperature 1\r\n  }\r\n}\r\n\r\nclient<llm> Gemini15Flash {\r\n  provider google-ai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gemini-1.5-flash\"\r\n    api_key env.GOOGLE_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> Gemini15Pro {\r\n  provider google-ai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gemini-1.5-pro\"\r\n    api_key env.GOOGLE_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> Gemini20FlashExp {\r\n  provider google-ai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gemini-2.0-flash-exp\"\r\n    api_key env.GOOGLE_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> Gemini20FlashThinkingExp {\r\n  provider google-ai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gemini-2.0-flash-thinking-exp-01-21\"\r\n    api_key env.GOOGLE_API_KEY\r\n  }\r\n\r\n}\r\n\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    mutliplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "../c:\\Users\\danielp\\llm_to_midi\\baml_src\\generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "../c:\\Users\\danielp\\llm_to_midi\\baml_src\\midi.baml": "/////////////////////////////\r\n// Existing classes\r\n/////////////////////////////\r\n\r\n// Represents the duration and pitch of a musical note\r\nclass NoteDuration {\r\n  note int? @description(\"MIDI note number, null indicates a rest. For percussion (channel 10), this represents the drum/percussion instrument number.\")\r\n  duration float @description(\"Duration in beats\")\r\n}\r\n\r\n// Holds program numbers (0-127) for different voices\r\nclass Instrumentation {\r\n  bass int @description(\"Program number for bass voice\")\r\n  tenor int @description(\"Program number for tenor voice\")\r\n  alto int @description(\"Program number for alto voice\")\r\n  soprano int @description(\"Program number for soprano voice\")\r\n}\r\n\r\nclass SongMetadata {\r\n  title string @description(\"Creative title for the piece\")\r\n  tempo int @description(\"Recommended tempo in BPM\")\r\n  key_signature string @description(\"Key of the piece (e.g., 'C Major')\")\r\n  time_signature string @description(\"Time signature (e.g., '4/4')\")\r\n  instruments Instrumentation\r\n}\r\n\r\n/////////////////////////////\r\n// NEW: Flexible modular design\r\n/////////////////////////////\r\n\r\n\r\nclass SectionPlan {\r\n  label string @description(\"Label for this section, e.g., 'Intro', 'Verse', 'Chorus', Solo/Instrumental Break, Exposition, A, B, C, etc.\")\r\n  description string? @description(\"Textual description for the section's role in the piece.\")\r\n  number_of_phrases int @description(\"How many phrases are planned in this section.\")\r\n}\r\n\r\nclass CompositionPlan {\r\n  plan_title string @description(\"A short descriptive title for the composition plan.\")\r\n  style string? @description(\"Optional style or genre for the piece, e.g. 'classical waltz', 'jazz ballad', etc.\")\r\n  sections SectionPlan[] @description(\"A list of sections planned for the piece.\")\r\n}\r\n\r\nclass ModularPhrase {\r\n  phrase_label string\r\n  bass NoteDuration[]\r\n  tenor NoteDuration[]\r\n  alto NoteDuration[]\r\n  soprano NoteDuration[]\r\n  piano NoteDuration[]\r\n  percussion NoteDuration[]? @description(\"Optional percussion track (channel 10) - uses General MIDI drum map note numbers\")\r\n}\r\n\r\nclass ModularSection {\r\n  section_label string @description(\"Label for this section, e.g., 'Intro', 'Verse', 'Chorus', Solo/Instrumental Break, Exposition, A, B, C, etc.\")\r\n  phrases ModularPhrase[] @description(\"\")\r\n}\r\n\r\nclass ModularPiece {\r\n  metadata SongMetadata\r\n  sections ModularSection[]\r\n}\r\n\r\nfunction GenerateCompositionPlan(theme: string) -> CompositionPlan {\r\n  client \"OpenAIo1\"\r\n  prompt #\"\r\nYou are an expert music composer. The user wants to plan the structure of a piece\r\nBEFORE generating any actual note-level content.\r\n\r\nThey have asked for the following theme or instructions:\r\n{{ theme }}\r\n\r\nReturn a JSON object that follows the schema (CompositionPlan) exactly:\r\n{{ ctx.output_format }}\r\n\r\nGuidelines for plan:\r\n- Provide a plan title (plan_title).\r\n- Optionally specify a style or genre (style).\r\n- Provide a list of sections, each with a label, optional description, and how many phrases it should have.\r\n- The user wants to see the piece broken into any structure you see fit (intro, verse, chorus, coda, etc.).\r\n- Only describe the plan; do NOT generate note-level detail at this step.\r\n\"#\r\n}\r\n\r\nfunction GenerateModularSong(plan: CompositionPlan) -> ModularPiece {\r\n  client \"OpenAIo1\"\r\n  prompt #\"\r\nYou are an expert composer. A user has already decided on the piece structure (sections, phrases) via the following plan:\r\n{{ plan }}\r\n\r\nNow please fill in the actual note-level content for each section and each phrase.\r\n\r\nRequirements / guidelines:\r\n- Each section in 'plan.sections' must appear in the final output with a matching label.\r\n- For each planned phrase, generate enough note-level detail in the voices (bass, tenor, alto, soprano, piano, and optionally percussion).\r\n- The final output must match the 'ModularPiece' schema exactly:\r\n\r\n{{ ctx.output_format }}\r\n\r\nNotes:\r\n- Use valid MIDI note numbers (0..127), or null for rests.\r\n- For percussion (channel 10), use the typical GM drum note numbers (35, 36, 38, 42, etc.) if applicable.\r\n- The 'metadata' can be guessed or derived from the plan. Provide a creative title, a tempo, a key signature, time signature, etc.\r\n- The user wants a cohesive piece but with the plan's structure.\r\n\"#\r\n}\r\n\r\ntest GenerateCompositionPlan {\r\n  functions [GenerateCompositionPlan]\r\n  args {\r\n    theme #\"\r\n      Write Twinkle Twinkle Little Star in C\r\n    \"#\r\n  }\r\n}\r\n\r\ntest GenerateModularSong {\r\n  functions [GenerateModularSong]\r\n  args {\r\n    plan {\r\n      plan_title \"Twinkle Twinkle Little Star - Traditional Arrangement\"\r\n      style \"Children's Folk Song\"\r\n      sections [\r\n        {\r\n          label \"A Section\"\r\n          description \"First melodic statement ('Twinkle twinkle little star, how I wonder what you are')\"\r\n          number_of_phrases 2\r\n        }\r\n        {\r\n          label \"B Section\" \r\n          description \"Middle contrasting section ('Up above the world so high, like a diamond in the sky')\"\r\n          number_of_phrases 2\r\n        }\r\n        {\r\n          label \"A' Section\"\r\n          description \"Return to main melody ('Twinkle twinkle little star, how I wonder what you are')\"\r\n          number_of_phrases 2\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n",
}

def get_baml_files():
    return file_map