###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "../c:\\Users\\danielp\\llm_to_midi\\baml_src\\clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> OpenAIo1 {\r\n  provider openai\r\n  options {\r\n    model \"o1\"\r\n    reasoning_effort \"high\"\r\n    temperature 1\r\n    api_key env.OPENAI_API_KEY\r\n\r\n  }\r\n}\r\n\r\nclient<llm> OpenAIo1Mini {\r\n  provider openai\r\n  options {\r\n    model \"o1-mini\"\r\n    temperature 1\r\n    api_key env.OPENAI_API_KEY\r\n\r\n  }\r\n\r\n}\r\n\r\nclient<llm> OpenAIo3Mini {\r\n  provider openai\r\n  retry_policy Exponential\r\n\r\n  options {\r\n    reasoning_effort \"high\"\r\n    model \"o3-mini\"\r\n    temperature 1\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> OpenAIGPT4o {\r\n  provider openai\r\n  retry_policy Exponential\r\n\r\n  options {\r\n    temperature 1\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n\r\n  }\r\n}\r\n\r\n\r\nclient<llm> DeepseekReasoner {\r\n  provider openai-generic\r\n  options {\r\n    model deepseek-ai/DeepSeek-R1\r\n    api_key env.DEEPSEEK_API_KEY\r\n    base_url \"https://api.hyperbolic.xyz/v1/\"\r\n    default_role \"user\"\r\n    temperature 1\r\n\r\n  }\r\n}\r\n\r\n\r\nclient<llm> AnthropicSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-latest\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n    temperature 1\r\n  }\r\n\r\n}\r\n\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    mutliplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "../c:\\Users\\danielp\\llm_to_midi\\baml_src\\generators.baml": "// This helps use auto generate libraries you can use in the language of\r\n// your choice. You can have multiple generators if you use multiple languages.\r\n// Just ensure that the output_dir is different for each generator.\r\ngenerator target {\r\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\r\n    output_type \"python/pydantic\"\r\n\r\n    // Where the generated code will be saved (relative to baml_src/)\r\n    output_dir \"../\"\r\n\r\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\r\n    // The BAML VSCode extension version should also match this version.\r\n    version \"0.77.0\"\r\n\r\n    // Valid values: \"sync\", \"async\"\r\n    // This controls what `b.FunctionName()` will be (sync or async).\r\n    default_client_mode sync\r\n}\r\n",
    "../c:\\Users\\danielp\\llm_to_midi\\baml_src\\midi.baml": "// Represents the duration and pitch of a musical note\r\nclass NoteDuration {\r\n  note int? @description(\"MIDI note number, null indicates a rest\")\r\n  duration float @description(\"Duration in beats\")\r\n}\r\n\r\n\r\n// Holds program numbers (0-127) for different voices\r\nclass Instrumentation {\r\n  bass int @description(\"Program number for bass voice\")\r\n  tenor int @description(\"Program number for tenor voice\")\r\n  alto int @description(\"Program number for alto voice\")\r\n  soprano int @description(\"Program number for soprano voice\")\r\n}\r\n\r\nclass SongMetadata {\r\n  title string @description(\"Creative title for the piece\")\r\n  tempo int @description(\"Recommended tempo in BPM\")\r\n  key_signature string @description(\"Key of the piece (e.g., 'C Major')\")\r\n  time_signature string @description(\"Time signature (e.g., '4/4')\")\r\n  instruments Instrumentation\r\n}\r\n\r\nclass Phrase {\r\n  phrase_label string\r\n  bass NoteDuration[]\r\n  tenor NoteDuration[]\r\n  alto NoteDuration[]\r\n  soprano NoteDuration[]\r\n  piano NoteDuration[]\r\n  percussion NoteDuration[]\r\n}\r\n\r\nclass Section {\r\n  section_label string @description(\"e.g., 'A1', 'B1', etc.\")\r\n  phrases Phrase[]\r\n}\r\n\r\n// Represents a musical piece in rounded binary form (A-B-A') structure\r\nclass RoundedBinaryForm {\r\n  sectionA Section[]\r\n  sectionB Section[]\r\n  sectionA_prime Section[]\r\n}\r\n\r\nclass RoundedBinaryPiece {\r\n  metadata SongMetadata\r\n  form RoundedBinaryForm\r\n}\r\n\r\nfunction GenerateMusic_OpenAIo1(theme: string, prompt: string) -> RoundedBinaryPiece {\r\n  client \"OpenAIo1\"\r\n  prompt #\"\r\n{{ prompt }}\r\n\r\n{{ ctx.output_format }}\r\n\r\nAdditional user instructions:\r\n\r\n{{ theme }}\r\n  \"#\r\n}\r\n\r\nfunction GenerateMusic_OpenAIo1Mini(theme: string, prompt: string) -> RoundedBinaryPiece {\r\n  client \"OpenAIo1Mini\" \r\n  prompt #\"\r\n{{ prompt }}\r\n\r\nAdditional user instructions:\r\n\r\n{{ theme }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction GenerateMusic_OpenAIo3Mini(theme: string, prompt: string) -> RoundedBinaryPiece {\r\n  client \"OpenAIo3Mini\"\r\n  prompt #\"\r\n{{ prompt }}\r\n\r\nAdditional user instructions:\r\n\r\n{{ theme }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction GenerateMusic_OpenAIGPT4o(theme: string, prompt: string) -> RoundedBinaryPiece {\r\n  client \"OpenAIGPT4o\"\r\n  prompt #\"\r\n{{ prompt }}\r\n\r\nAdditional user instructions:\r\n\r\n{{ theme }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction GenerateMusic_DeepseekReasoner(theme: string, prompt: string) -> RoundedBinaryPiece {\r\n  client \"DeepseekReasoner\"\r\n  prompt #\"\r\n{{ prompt }}\r\n\r\nAdditional user instructions:\r\n\r\n{{ theme }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction GenerateMusic_AnthropicSonnet(theme: string, prompt: string) -> RoundedBinaryPiece {\r\n  client \"AnthropicSonnet\"\r\n  prompt #\"\r\n{{ prompt }}\r\n\r\nAdditional user instructions:\r\n\r\n{{ theme }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\ntest waltz_theme {\r\n  functions [GenerateMusic_OpenAIo1]\r\n    args {\r\n    theme \"Write the village theme for a SNES game.\"\r\n    prompt #\"\r\n# Music Composition Instructions\r\n\r\nYou are an expert composer well-versed in music theory.\r\n\r\n## Form\r\nCompose a short piece in rounded binary form (A, B, A'). Each section (A, B, A') can be further subdivided into one or more subsections (A1, A2, etc.).\r\n\r\n## Voices\r\nEach subsection must contain a minimum of two phrases, and each phrase can have up to 6 voices:\r\n\r\n- bass\r\n- tenor \r\n- alto\r\n- soprano\r\n- piano\r\n- percussion\r\n\r\n## Instruments\r\nChoose an appropriate MIDI instrument for each of the four voices:\r\n- bass\r\n- tenor\r\n- alto \r\n- soprano\r\n\r\nThe percussion voice is always on MIDI channel 10.\r\n\r\n*Note: The piano voice is always instrument 0 (Acoustic Grand).*\r\n\r\n## Composition Guidelines\r\n- Use varied rhythms for each part\r\n- Keep each part coherent, with independent but harmonically compatible lines\r\n\r\n- Use good voice leading between the parts, avoid parallel fifths and octaves\r\n- Write interesting motifs and follow the rules of Western tonality and music theory\r\n- Ensure there is a lot of variety between the phrases\r\n- The final A' must restate A's theme\r\n- Parts may rest at times to give other parts a chance to shine and listeners a chance to catch their breath\r\n\r\n## Technical Reminders\r\n- Each section must contain a minimum of two phrases\r\n- Make phrases extremely long and interesting\r\n- \"note\" is a MIDI note number (60=middle C) or null for rest\r\n- \"duration\" is in beats (1.0=quarter, 0.5=eighth, etc.)\r\n- End each phrase with an interesting cadence or a long note\r\n- The final A' must restate A's theme\r\n- **EXTREMELY IMPORTANT**: Make sure there is a variety of rhythms and counterpoint among the various voices. Limit the amount of unison rhythms.\r\n- Use the piano to help keep the beat and add percussive interest, for example, by arpeggiating the chords\"#\r\n\r\n  }\r\n}\r\n",
}

def get_baml_files():
    return file_map